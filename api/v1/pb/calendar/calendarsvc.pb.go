// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: calendarsvc.proto

package calendarsvc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CalendarEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Time        string   `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Timezone    string   `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Duration    int32    `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Notes       []string `protobuf:"bytes,7,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *CalendarEvent) Reset() {
	*x = CalendarEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEvent) ProtoMessage() {}

func (x *CalendarEvent) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEvent.ProtoReflect.Descriptor instead.
func (*CalendarEvent) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{0}
}

func (x *CalendarEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CalendarEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CalendarEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CalendarEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *CalendarEvent) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CalendarEvent) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CalendarEvent) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

type CalendarIndexEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*CalendarIndexEventRequest_Filters `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *CalendarIndexEventRequest) Reset() {
	*x = CalendarIndexEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarIndexEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarIndexEventRequest) ProtoMessage() {}

func (x *CalendarIndexEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarIndexEventRequest.ProtoReflect.Descriptor instead.
func (*CalendarIndexEventRequest) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{1}
}

func (x *CalendarIndexEventRequest) GetFilters() []*CalendarIndexEventRequest_Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type CalendarIndexEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CalendarEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Err    string           `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *CalendarIndexEventReply) Reset() {
	*x = CalendarIndexEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarIndexEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarIndexEventReply) ProtoMessage() {}

func (x *CalendarIndexEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarIndexEventReply.ProtoReflect.Descriptor instead.
func (*CalendarIndexEventReply) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{2}
}

func (x *CalendarIndexEventReply) GetEvents() []*CalendarEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CalendarIndexEventReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type CalendarStoreEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *CalendarEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *CalendarStoreEventRequest) Reset() {
	*x = CalendarStoreEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarStoreEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarStoreEventRequest) ProtoMessage() {}

func (x *CalendarStoreEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarStoreEventRequest.ProtoReflect.Descriptor instead.
func (*CalendarStoreEventRequest) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{3}
}

func (x *CalendarStoreEventRequest) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type CalendarStoreEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CalendarStoreEventReply) Reset() {
	*x = CalendarStoreEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarStoreEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarStoreEventReply) ProtoMessage() {}

func (x *CalendarStoreEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarStoreEventReply.ProtoReflect.Descriptor instead.
func (*CalendarStoreEventReply) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{4}
}

func (x *CalendarStoreEventReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CalendarStoreEventReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type CalendarShowEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *CalendarShowEventRequest) Reset() {
	*x = CalendarShowEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarShowEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarShowEventRequest) ProtoMessage() {}

func (x *CalendarShowEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarShowEventRequest.ProtoReflect.Descriptor instead.
func (*CalendarShowEventRequest) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{5}
}

func (x *CalendarShowEventRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type CalendarShowEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *CalendarEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Err   string         `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CalendarShowEventReply) Reset() {
	*x = CalendarShowEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarShowEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarShowEventReply) ProtoMessage() {}

func (x *CalendarShowEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarShowEventReply.ProtoReflect.Descriptor instead.
func (*CalendarShowEventReply) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{6}
}

func (x *CalendarShowEventReply) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *CalendarShowEventReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type CalendarUpdateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Event *CalendarEvent `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *CalendarUpdateEventRequest) Reset() {
	*x = CalendarUpdateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarUpdateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarUpdateEventRequest) ProtoMessage() {}

func (x *CalendarUpdateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarUpdateEventRequest.ProtoReflect.Descriptor instead.
func (*CalendarUpdateEventRequest) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{7}
}

func (x *CalendarUpdateEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CalendarUpdateEventRequest) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type CalendarUpdateEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CalendarUpdateEventReply) Reset() {
	*x = CalendarUpdateEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarUpdateEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarUpdateEventReply) ProtoMessage() {}

func (x *CalendarUpdateEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarUpdateEventReply.ProtoReflect.Descriptor instead.
func (*CalendarUpdateEventReply) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{8}
}

func (x *CalendarUpdateEventReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CalendarUpdateEventReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type CalendarDeleteEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CalendarDeleteEventRequest) Reset() {
	*x = CalendarDeleteEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarDeleteEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarDeleteEventRequest) ProtoMessage() {}

func (x *CalendarDeleteEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarDeleteEventRequest.ProtoReflect.Descriptor instead.
func (*CalendarDeleteEventRequest) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{9}
}

func (x *CalendarDeleteEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CalendarDeleteEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CalendarDeleteEventReply) Reset() {
	*x = CalendarDeleteEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarDeleteEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarDeleteEventReply) ProtoMessage() {}

func (x *CalendarDeleteEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarDeleteEventReply.ProtoReflect.Descriptor instead.
func (*CalendarDeleteEventReply) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{10}
}

func (x *CalendarDeleteEventReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CalendarDeleteEventReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type CalendarServiceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CalendarServiceStatusRequest) Reset() {
	*x = CalendarServiceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarServiceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarServiceStatusRequest) ProtoMessage() {}

func (x *CalendarServiceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarServiceStatusRequest.ProtoReflect.Descriptor instead.
func (*CalendarServiceStatusRequest) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{11}
}

type CalendarServiceStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CalendarServiceStatusReply) Reset() {
	*x = CalendarServiceStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarServiceStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarServiceStatusReply) ProtoMessage() {}

func (x *CalendarServiceStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarServiceStatusReply.ProtoReflect.Descriptor instead.
func (*CalendarServiceStatusReply) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{12}
}

func (x *CalendarServiceStatusReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CalendarServiceStatusReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type CalendarIndexEventRequest_Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CalendarIndexEventRequest_Filters) Reset() {
	*x = CalendarIndexEventRequest_Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendarsvc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarIndexEventRequest_Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarIndexEventRequest_Filters) ProtoMessage() {}

func (x *CalendarIndexEventRequest_Filters) ProtoReflect() protoreflect.Message {
	mi := &file_calendarsvc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarIndexEventRequest_Filters.ProtoReflect.Descriptor instead.
func (*CalendarIndexEventRequest_Filters) Descriptor() ([]byte, []int) {
	return file_calendarsvc_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CalendarIndexEventRequest_Filters) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CalendarIndexEventRequest_Filters) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_calendarsvc_proto protoreflect.FileDescriptor

var file_calendarsvc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x31, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0x44, 0x0a,
	0x19, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x53, 0x68, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x55, 0x0a, 0x1a, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x44, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x2c, 0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x1a, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x32, 0x8e, 0x04, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12,
	0x52, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calendarsvc_proto_rawDescOnce sync.Once
	file_calendarsvc_proto_rawDescData = file_calendarsvc_proto_rawDesc
)

func file_calendarsvc_proto_rawDescGZIP() []byte {
	file_calendarsvc_proto_rawDescOnce.Do(func() {
		file_calendarsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_calendarsvc_proto_rawDescData)
	})
	return file_calendarsvc_proto_rawDescData
}

var file_calendarsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_calendarsvc_proto_goTypes = []interface{}{
	(*CalendarEvent)(nil),                     // 0: pb.CalendarEvent
	(*CalendarIndexEventRequest)(nil),         // 1: pb.CalendarIndexEventRequest
	(*CalendarIndexEventReply)(nil),           // 2: pb.CalendarIndexEventReply
	(*CalendarStoreEventRequest)(nil),         // 3: pb.CalendarStoreEventRequest
	(*CalendarStoreEventReply)(nil),           // 4: pb.CalendarStoreEventReply
	(*CalendarShowEventRequest)(nil),          // 5: pb.CalendarShowEventRequest
	(*CalendarShowEventReply)(nil),            // 6: pb.CalendarShowEventReply
	(*CalendarUpdateEventRequest)(nil),        // 7: pb.CalendarUpdateEventRequest
	(*CalendarUpdateEventReply)(nil),          // 8: pb.CalendarUpdateEventReply
	(*CalendarDeleteEventRequest)(nil),        // 9: pb.CalendarDeleteEventRequest
	(*CalendarDeleteEventReply)(nil),          // 10: pb.CalendarDeleteEventReply
	(*CalendarServiceStatusRequest)(nil),      // 11: pb.CalendarServiceStatusRequest
	(*CalendarServiceStatusReply)(nil),        // 12: pb.CalendarServiceStatusReply
	(*CalendarIndexEventRequest_Filters)(nil), // 13: pb.CalendarIndexEventRequest.Filters
}
var file_calendarsvc_proto_depIdxs = []int32{
	13, // 0: pb.CalendarIndexEventRequest.filters:type_name -> pb.CalendarIndexEventRequest.Filters
	0,  // 1: pb.CalendarIndexEventReply.events:type_name -> pb.CalendarEvent
	0,  // 2: pb.CalendarStoreEventRequest.event:type_name -> pb.CalendarEvent
	0,  // 3: pb.CalendarShowEventReply.event:type_name -> pb.CalendarEvent
	0,  // 4: pb.CalendarUpdateEventRequest.event:type_name -> pb.CalendarEvent
	1,  // 5: pb.Calendar.CalendarIndexEvent:input_type -> pb.CalendarIndexEventRequest
	3,  // 6: pb.Calendar.CalendarStoreEvent:input_type -> pb.CalendarStoreEventRequest
	5,  // 7: pb.Calendar.CalendarShowEvent:input_type -> pb.CalendarShowEventRequest
	7,  // 8: pb.Calendar.CalendarUpdateEvent:input_type -> pb.CalendarUpdateEventRequest
	9,  // 9: pb.Calendar.CalendarDeleteEvent:input_type -> pb.CalendarDeleteEventRequest
	11, // 10: pb.Calendar.CalendarServiceStatus:input_type -> pb.CalendarServiceStatusRequest
	2,  // 11: pb.Calendar.CalendarIndexEvent:output_type -> pb.CalendarIndexEventReply
	4,  // 12: pb.Calendar.CalendarStoreEvent:output_type -> pb.CalendarStoreEventReply
	6,  // 13: pb.Calendar.CalendarShowEvent:output_type -> pb.CalendarShowEventReply
	8,  // 14: pb.Calendar.CalendarUpdateEvent:output_type -> pb.CalendarUpdateEventReply
	10, // 15: pb.Calendar.CalendarDeleteEvent:output_type -> pb.CalendarDeleteEventReply
	12, // 16: pb.Calendar.CalendarServiceStatus:output_type -> pb.CalendarServiceStatusReply
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_calendarsvc_proto_init() }
func file_calendarsvc_proto_init() {
	if File_calendarsvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calendarsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarIndexEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarIndexEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarStoreEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarStoreEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarShowEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarShowEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarUpdateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarUpdateEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarDeleteEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarDeleteEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarServiceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarServiceStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendarsvc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalendarIndexEventRequest_Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calendarsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calendarsvc_proto_goTypes,
		DependencyIndexes: file_calendarsvc_proto_depIdxs,
		MessageInfos:      file_calendarsvc_proto_msgTypes,
	}.Build()
	File_calendarsvc_proto = out.File
	file_calendarsvc_proto_rawDesc = nil
	file_calendarsvc_proto_goTypes = nil
	file_calendarsvc_proto_depIdxs = nil
}
