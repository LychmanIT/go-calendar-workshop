// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calendarsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarClient interface {
	CalendarIndexEvent(ctx context.Context, in *CalendarIndexEventRequest, opts ...grpc.CallOption) (*CalendarIndexEventReply, error)
	CalendarStoreEvent(ctx context.Context, in *CalendarStoreEventRequest, opts ...grpc.CallOption) (*CalendarStoreEventReply, error)
	CalendarShowEvent(ctx context.Context, in *CalendarShowEventRequest, opts ...grpc.CallOption) (*CalendarShowEventReply, error)
	CalendarUpdateEvent(ctx context.Context, in *CalendarUpdateEventRequest, opts ...grpc.CallOption) (*CalendarUpdateEventReply, error)
	CalendarDeleteEvent(ctx context.Context, in *CalendarDeleteEventRequest, opts ...grpc.CallOption) (*CalendarDeleteEventReply, error)
	CalendarServiceStatus(ctx context.Context, in *CalendarServiceStatusRequest, opts ...grpc.CallOption) (*CalendarServiceStatusReply, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) CalendarIndexEvent(ctx context.Context, in *CalendarIndexEventRequest, opts ...grpc.CallOption) (*CalendarIndexEventReply, error) {
	out := new(CalendarIndexEventReply)
	err := c.cc.Invoke(ctx, "/pb.Calendar/CalendarIndexEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CalendarStoreEvent(ctx context.Context, in *CalendarStoreEventRequest, opts ...grpc.CallOption) (*CalendarStoreEventReply, error) {
	out := new(CalendarStoreEventReply)
	err := c.cc.Invoke(ctx, "/pb.Calendar/CalendarStoreEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CalendarShowEvent(ctx context.Context, in *CalendarShowEventRequest, opts ...grpc.CallOption) (*CalendarShowEventReply, error) {
	out := new(CalendarShowEventReply)
	err := c.cc.Invoke(ctx, "/pb.Calendar/CalendarShowEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CalendarUpdateEvent(ctx context.Context, in *CalendarUpdateEventRequest, opts ...grpc.CallOption) (*CalendarUpdateEventReply, error) {
	out := new(CalendarUpdateEventReply)
	err := c.cc.Invoke(ctx, "/pb.Calendar/CalendarUpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CalendarDeleteEvent(ctx context.Context, in *CalendarDeleteEventRequest, opts ...grpc.CallOption) (*CalendarDeleteEventReply, error) {
	out := new(CalendarDeleteEventReply)
	err := c.cc.Invoke(ctx, "/pb.Calendar/CalendarDeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CalendarServiceStatus(ctx context.Context, in *CalendarServiceStatusRequest, opts ...grpc.CallOption) (*CalendarServiceStatusReply, error) {
	out := new(CalendarServiceStatusReply)
	err := c.cc.Invoke(ctx, "/pb.Calendar/CalendarServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
// All implementations should embed UnimplementedCalendarServer
// for forward compatibility
type CalendarServer interface {
	CalendarIndexEvent(context.Context, *CalendarIndexEventRequest) (*CalendarIndexEventReply, error)
	CalendarStoreEvent(context.Context, *CalendarStoreEventRequest) (*CalendarStoreEventReply, error)
	CalendarShowEvent(context.Context, *CalendarShowEventRequest) (*CalendarShowEventReply, error)
	CalendarUpdateEvent(context.Context, *CalendarUpdateEventRequest) (*CalendarUpdateEventReply, error)
	CalendarDeleteEvent(context.Context, *CalendarDeleteEventRequest) (*CalendarDeleteEventReply, error)
	CalendarServiceStatus(context.Context, *CalendarServiceStatusRequest) (*CalendarServiceStatusReply, error)
}

// UnimplementedCalendarServer should be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (UnimplementedCalendarServer) CalendarIndexEvent(context.Context, *CalendarIndexEventRequest) (*CalendarIndexEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarIndexEvent not implemented")
}
func (UnimplementedCalendarServer) CalendarStoreEvent(context.Context, *CalendarStoreEventRequest) (*CalendarStoreEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarStoreEvent not implemented")
}
func (UnimplementedCalendarServer) CalendarShowEvent(context.Context, *CalendarShowEventRequest) (*CalendarShowEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarShowEvent not implemented")
}
func (UnimplementedCalendarServer) CalendarUpdateEvent(context.Context, *CalendarUpdateEventRequest) (*CalendarUpdateEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarUpdateEvent not implemented")
}
func (UnimplementedCalendarServer) CalendarDeleteEvent(context.Context, *CalendarDeleteEventRequest) (*CalendarDeleteEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarDeleteEvent not implemented")
}
func (UnimplementedCalendarServer) CalendarServiceStatus(context.Context, *CalendarServiceStatusRequest) (*CalendarServiceStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarServiceStatus not implemented")
}

// UnsafeCalendarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServer will
// result in compilation errors.
type UnsafeCalendarServer interface {
	mustEmbedUnimplementedCalendarServer()
}

func RegisterCalendarServer(s grpc.ServiceRegistrar, srv CalendarServer) {
	s.RegisterService(&Calendar_ServiceDesc, srv)
}

func _Calendar_CalendarIndexEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarIndexEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarIndexEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calendar/CalendarIndexEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarIndexEvent(ctx, req.(*CalendarIndexEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CalendarStoreEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarStoreEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarStoreEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calendar/CalendarStoreEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarStoreEvent(ctx, req.(*CalendarStoreEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CalendarShowEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarShowEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarShowEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calendar/CalendarShowEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarShowEvent(ctx, req.(*CalendarShowEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CalendarUpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarUpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarUpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calendar/CalendarUpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarUpdateEvent(ctx, req.(*CalendarUpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CalendarDeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarDeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarDeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calendar/CalendarDeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarDeleteEvent(ctx, req.(*CalendarDeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CalendarServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calendar/CalendarServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarServiceStatus(ctx, req.(*CalendarServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calendar_ServiceDesc is the grpc.ServiceDesc for Calendar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calendar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalendarIndexEvent",
			Handler:    _Calendar_CalendarIndexEvent_Handler,
		},
		{
			MethodName: "CalendarStoreEvent",
			Handler:    _Calendar_CalendarStoreEvent_Handler,
		},
		{
			MethodName: "CalendarShowEvent",
			Handler:    _Calendar_CalendarShowEvent_Handler,
		},
		{
			MethodName: "CalendarUpdateEvent",
			Handler:    _Calendar_CalendarUpdateEvent_Handler,
		},
		{
			MethodName: "CalendarDeleteEvent",
			Handler:    _Calendar_CalendarDeleteEvent_Handler,
		},
		{
			MethodName: "CalendarServiceStatus",
			Handler:    _Calendar_CalendarServiceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendarsvc.proto",
}
